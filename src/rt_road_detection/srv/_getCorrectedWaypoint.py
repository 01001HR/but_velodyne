"""autogenerated by genpy from rt_road_detection/getCorrectedWaypointRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class getCorrectedWaypointRequest(genpy.Message):
  _md5sum = "c80fe062ff6a44bcac56f3a46c70f9c9"
  _type = "rt_road_detection/getCorrectedWaypointRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point wp_in

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['wp_in']
  _slot_types = ['geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       wp_in

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(getCorrectedWaypointRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.wp_in is None:
        self.wp_in = geometry_msgs.msg.Point()
    else:
      self.wp_in = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.wp_in.x, _x.wp_in.y, _x.wp_in.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.wp_in is None:
        self.wp_in = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.wp_in.x, _x.wp_in.y, _x.wp_in.z,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.wp_in.x, _x.wp_in.y, _x.wp_in.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.wp_in is None:
        self.wp_in = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.wp_in.x, _x.wp_in.y, _x.wp_in.z,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d = struct.Struct("<3d")
"""autogenerated by genpy from rt_road_detection/getCorrectedWaypointResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class getCorrectedWaypointResponse(genpy.Message):
  _md5sum = "329843322da51589a43eaac6184cece3"
  _type = "rt_road_detection/getCorrectedWaypointResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point wp_out


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['wp_out']
  _slot_types = ['geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       wp_out

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(getCorrectedWaypointResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.wp_out is None:
        self.wp_out = geometry_msgs.msg.Point()
    else:
      self.wp_out = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.wp_out.x, _x.wp_out.y, _x.wp_out.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.wp_out is None:
        self.wp_out = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.wp_out.x, _x.wp_out.y, _x.wp_out.z,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.wp_out.x, _x.wp_out.y, _x.wp_out.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.wp_out is None:
        self.wp_out = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.wp_out.x, _x.wp_out.y, _x.wp_out.z,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d = struct.Struct("<3d")
class getCorrectedWaypoint(object):
  _type          = 'rt_road_detection/getCorrectedWaypoint'
  _md5sum = '0131e4ac6bd3b1ca0e1be0fd722f1b52'
  _request_class  = getCorrectedWaypointRequest
  _response_class = getCorrectedWaypointResponse
